build qemu:

#submodule dependicies:
git submodule update --init dtc pixman
#tool dependicies:
sudo apt-get install autoconf automake libtool

Beispielaufruf:
./configure --python=/usr/bin/python2 --disable-werror --disable-strip --enable-debug --target-list="x86_64-softmmu"
Hilfe:
./configure --python=/usr/bin/python2 --help

# from sweb /arch/x86/32/CMakelists.include
# qemu: Run qemu in non debugging mode
qemu-system-i386 -m 8M -cpu qemu32 -drive file=SWEB-flat.vmdk,index=0,media=disk,format=raw -debugcon stdio -no-reboot
# qemugdb: Run qemu in debugging mode
qemu-system-i386 -no-kvm -s -S -m 8M -drive file=SWEB-flat.vmdk,index=0,media=disk,format=raw -debugcon stdio -no-reboot


#SWEB FLAG?
CC=gcc-6 CC=g++-6 make mrproper

---------> don't forget buildqemu script! go to root folder "vim buildqemu"

+++++++++++++ trace function qemu

--> memory und tcg traces available im file trace-events!
--> trace erstellen: http://git.qemu.org/?p=qemu.git;a=blob_plain;f=docs/devel/tracing.txt;hb=HEAD
--> https://rwmj.wordpress.com/2016/03/17/tracing-qemu-guest-execution/

Firstly you have to compile QEMU from source. Before compiling it, read docs/tracing.txt carefully.
Also edit trace-events and remove the disable keyword from the following lines

qemu/trace-events
Beispiel:
    # TCG related tracing (mostly disabled by default)
    # cpu-exec.c
    disable exec_tb(void *tb, uintptr_t pc) "tb:%p pc=0x%"PRIxPTR
    disable exec_tb_nocache(void *tb, uintptr_t pc) "tb:%p pc=0x%"PRIxPTR
    disable exec_tb_exit(void *last_tb, unsigned int flags) "tb:%p flags=%x"

Für mich interessant?
    # memory.c
    memory_region_ops_read(int cpu_index, void *mr, uint64_t addr, uint64_t value, unsigned size) "cpu %d mr %p addr %#"PRIx64" value %#"PRIx64" size %u"
    memory_region_ops_write(int cpu_index, void *mr, uint64_t addr, uint64_t value, unsigned size) "cpu %d mr %p addr %#"PRIx64" value %#"PRIx64" size %u"
    memory_region_subpage_read(int cpu_index, void *mr, uint64_t offset, uint64_t value, unsigned size) "cpu %d mr %p offset %#"PRIx64" value %#"PRIx64" size %u"
    memory_region_subpage_write(int cpu_index, void *mr, uint64_t offset, uint64_t value, unsigned size) "cpu %d mr %p offset %#"PRIx64" value %#"PRIx64" size %u"
    memory_region_tb_read(int cpu_index, uint64_t addr, uint64_t value, unsigned size) "cpu %d addr %#"PRIx64" value %#"PRIx64" size %u"
    memory_region_tb_write(int cpu_index, uint64_t addr, uint64_t value, unsigned size) "cpu %d addr %#"PRIx64" value %#"PRIx64" size %u"
    memory_region_ram_device_read(int cpu_index, void *mr, uint64_t addr, uint64_t value, unsigned size) "cpu %d mr %p addr %#"PRIx64" value %#"PRIx64" size %u"
    memory_region_ram_device_write(int cpu_index, void *mr, uint64_t addr, uint64_t value, unsigned size) "cpu %d mr %p addr %#"PRIx64" value %#"PRIx64" size %u"
--------> siehe memory.c zeile 1125

*TODO* offene fragen.. wo ist das trace file? warum kein file unter /usr/share/qemu?

################## debug gdb

gdb
set architecture i386:x86-64
target remote localhost:1234

zum testen:
minimal programm schreiben, compilieren, gdb darauf ausführen
-> gcc -O0 -m32 -g x.c
-> gdb qemu-i386

++++++++++++++++++++++++++++++ MEMORY ++++++++++++++++ siehe docs/memory.txt

Types of regions
----------------

There are multiple types of memory regions (all represented by a single C type
MemoryRegion):

- RAM: a RAM region is simply a range of host memory that can be made available
  to the guest.
  You typically initialize these with memory_region_init_ram().  Some special
  purposes require the variants memory_region_init_resizeable_ram(),
  memory_region_init_ram_from_file(), or memory_region_init_ram_ptr()

  memory_region_init_ram_device_ptr
   -> gibt ein ganz normales byte array zurück!
   -> definition eigener callback funktionen zu machen.. siehe "mr->"

Mein Board befindet sich nun: /qemu/hw/arm/xilinx_zynq_enc.c
Siehe files:
  runqemu script in poky/scripts zeile 1065.
    -> tauscht die executable as wie qemu aufgerufen wird

  rename in meta-xilinx/conf/machine/qemu-zynq7.conf
   -> QD_Machine = “- machine xilinx-zynq-a9“
  to
   -> QD_Machine = “- machine xilinx-zynq-a9_enc“

  qemu invocation -> ………… -machine xilinx-zynq-a9_enc
 memory_region_init                   (MemoryRegion *mr,Object *owner,const char *name,uint64_t size)
 memory_region_init_ram_device_ptr    (MemoryRegion *mr,Object *owner,const char *name,uint64_t size,void *ptr)




#important stuff:
1. Zum Verständnis -
  The first meaning of ‘target’ means the emulated target machine
  architecture. For example, when emulating mips machine on x86,
  the target is mips and host is x86. However,
  in tcg(tiny code generator), target has a different meaning.
  It means the generated binary architecture.

  Function decode_opc is used for decoding all the fetched
  instructions before tcg generating the target binary!

2. softmmu model
  Given the guest virtual address, how does qemu find the
  corresponding host virtual address? First qemu needs to
  translate the guest virtual address to guest physical address.
  Then qemu needs to find the PhysPageDesc entry in table
  l1_phys_map and get the phys_offset. At last qemu should add
  phys_offset to phys_ram_base to get the host virtual address.

  Qemu uses a softmmu model to speed up this process.
  Its main idea is storing the offset of guest virtual address
  to host virtual address in a TLB table. When translating the
  guest virtual address to host virtual address, it will search
  this TLB table firstly. If there is an entry in the table,
  then qemu can add this offset to guest virtual address to get
  the host virtual address directly. Otherwise, it needs to search
  the l1_phys_map table and then fill the corresponding entry to
  the TLB table.

  #Watchpoints

exec.c zeile 2221 -> if (cpu->watchpoint_hit) {
in clion!

  /* We re-entered the check after replacing the TB. Now raise
 * the debug interrupt so that is will trigger after the
 * current instruction. */

/* THEUEMA
 * If the memory address is watched this function will be called 2 times for one watchpoint.
 *
 * -> 2nd call happens from either
 * -> tb_check_watchpoint->watch_mem_read()->check_watchpoint()
 * -> or
 * -> tb_check_watchpoint->watch_mem_write()->check_watchpoint()
 *
 * This function is called from memory watch functions
 * watch_mem_read() & watch_mem_write(), which are called by Macros or something?
 *
 * At first call it will find and invalidate the corresponding TB. (cpu->watchpoint_hit == NULL)
 * It is either searched in the Hash Table or re-generated.
 * Some flags are set including BP_WATCHPOINT_HIT which leads us HERE in 2nd call.
 * Here, the interrupt happens and we get a DEBUG message to the terminal.
 *
 * Why do qemu need to invalidate current translation block and regenerate the code?
 * Because most of the time a memory access is in the middle of a translation block.
 * If we want to rerun this instruction,
 * we need to regenerate the code from the current instruction (memory address).
 * Moreover before invalidating the translation block,
 * qemu needs to sync the cpu state to guest cpu(cpu_restore_state).
 * That’s because the cpu state in the middle of translation block is different from the actual cpu state.
 * --> Understanding this process needs some knowledge of binary translation.
 * */
